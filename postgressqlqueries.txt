-- Create the shop table
CREATE TABLE shop (
    article INTEGER NOT NULL,
    dealer VARCHAR(20) NOT NULL,
    price NUMERIC(16,2) NOT NULL,
    PRIMARY KEY (article, dealer)
);

-- Insert data into the shop table
INSERT INTO shop (article, dealer, price) VALUES
    (1, 'A', 3.45),
    (1, 'B', 3.99),
    (2, 'A', 10.99),
    (3, 'B', 1.45),
    (3, 'C', 1.69),
    (3, 'D', 1.25),
    (4, 'D', 19.95);

-- Select all data from the shop table ordered by article
SELECT * FROM shop ORDER BY article;

-- Select articles with the maximum price
SELECT article, dealer, price
FROM shop
WHERE price = (SELECT MAX(price) FROM shop);

-- Select articles with the maximum price using a LEFT JOIN
SELECT s1.article, s1.dealer, s1.price
FROM shop s1
LEFT JOIN shop s2 ON s1.price < s2.price
WHERE s2.article IS NULL;

-- Create the sales table
CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    article INTEGER,
    dealer VARCHAR(20),
    sale_price NUMERIC(16,2),
    sale_date DATE,
    FOREIGN KEY (article, dealer) REFERENCES shop(article, dealer)
);

-- Insert data into the sales table
INSERT INTO sales (sale_id, article, dealer, sale_price, sale_date) VALUES
    (1, 1, 'A', 3.50, '2024-01-01'),
    (2, 1, 'B', 4.00, '2024-01-02'),
    (3, 2, 'A', 11.00, '2024-01-03'),
    (4, 3, 'B', 1.50, '2024-01-04'),
    (5, 3, 'C', 1.80, '2024-01-05'),
    (6, 4, 'D', 20.00, '2024-01-06');

-- Complex Query
SELECT s.dealer, s.article, s.sale_price
FROM sales s
WHERE s.sale_price > (
    SELECT AVG(price) 
    FROM shop 
    WHERE article = s.article
)
ORDER BY s.article, s.dealer;

-- Create the customers table
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    customer_name VARCHAR(100),
    contact_info VARCHAR(100)
);

-- Create the payments table
CREATE TABLE payments (
    payment_id SERIAL PRIMARY KEY,
    customer_id INTEGER,
    sale_id INTEGER,
    payment_amount NUMERIC(16,2),
    payment_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id)
);

-- Insert data into the customers table
INSERT INTO customers (customer_id, customer_name, contact_info) VALUES
    (1, 'Alice Johnson', 'alice@example.com'),
    (2, 'Bob Smith', 'bob@example.com'),
    (3, 'Charlie Brown', 'charlie@example.com');

-- Insert data into the payments table
INSERT INTO payments (payment_id, customer_id, sale_id, payment_amount, payment_date) VALUES
    (1, 1, 1, 3.50, '2024-01-02'),
    (2, 2, 2, 4.00, '2024-01-03'),
    (3, 1, 3, 11.00, '2024-01-04'),
    (4, 3, 4, 1.50, '2024-01-05'),
    (5, 2, 5, 20.00, '2024-01-06');

-- Complex Query with Ranking
SELECT 
    s.dealer,
    s.article,
    SUM(s.sale_price) AS total_sales,
    AVG(s.sale_price) AS avg_sale_price,
    SUM(p.payment_amount) AS total_payments,
    RANK() OVER (ORDER BY SUM(s.sale_price) DESC) AS sales_rank
FROM 
    sales s
JOIN 
    payments p ON s.sale_id = p.sale_id
WHERE 
    s.sale_price > (
        SELECT AVG(price) 
        FROM shop 
        WHERE article = s.article
    )
GROUP BY 
    s.dealer, s.article
HAVING 
    SUM(p.payment_amount) > 0
ORDER BY 
    total_sales DESC;


SELECT * from sales;
UPDATE sales AS s
SET sale_price = (
    SELECT AVG(price)
    FROM shop
    WHERE shop.article = s.article
)
WHERE s.sale_price < (
    SELECT AVG(price)
    FROM shop
    WHERE shop.article = s.article
);

SELECT * from sales;

SELECT * from shop;
-- Update shop.price to the maximum sale_price for matching articles and dealers
UPDATE shop sh
SET price = (
    SELECT MAX(s.sale_price)
    FROM sales s
    WHERE s.article = sh.article AND s.dealer = sh.dealer
)
WHERE EXISTS (
    SELECT 1
    FROM sales s
    WHERE s.article = sh.article AND s.dealer = sh.dealer
);
SELECT * from shop;

-- DELETE FROM sales WHERE article NOT IN (SELECT article FROM shop);
DELETE FROM sales
WHERE NOT EXISTS (SELECT 1 FROM shop WHERE shop.article = sales.article);

-- DELETE FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM payments);
DELETE FROM customers
WHERE NOT EXISTS (SELECT 1 FROM payments WHERE payments.customer_id = customers.customer_id);