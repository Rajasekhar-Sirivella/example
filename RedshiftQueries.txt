-- Create shop table
CREATE TABLE shop (
    article INT NOT NULL,
    dealer VARCHAR(20) NOT NULL,
    price DECIMAL(16,2) NOT NULL,
    PRIMARY KEY(article, dealer)
);

-- Insert data into shop table
INSERT INTO shop VALUES
    (1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),
    (3,'C',1.69),(3,'D',1.25),(4,'D',19.95);

-- Select all data from shop table ordered by article
SELECT * FROM shop ORDER BY article;

-- Select articles with the maximum price
SELECT article, dealer, price
FROM shop
WHERE price = (SELECT MAX(price) FROM shop);

-- Select articles with the maximum price using LEFT JOIN
SELECT s1.article, s1.dealer, s1.price
FROM shop s1
LEFT JOIN shop s2 ON s1.price < s2.price
WHERE s2.article IS NULL;

-- Create sales table
CREATE TABLE sales (
    sale_id INT IDENTITY(1,1) PRIMARY KEY,
    article INT,
    dealer VARCHAR(20),
    sale_price DECIMAL(16, 2),
    sale_date DATE,
    FOREIGN KEY (article, dealer) REFERENCES shop(article, dealer)
);

-- Insert data into sales table
INSERT INTO sales (article, dealer, sale_price, sale_date) VALUES
    (1, 'A', 3.50, '2024-01-01'),
    (1, 'B', 4.00, '2024-01-02'),
    (2, 'A', 11.00, '2024-01-03'),
    (3, 'B', 1.50, '2024-01-04'),
    (3, 'C', 1.80, '2024-01-05'),
    (4, 'D', 20.00, '2024-01-06');

-- Complex Query
SELECT s.dealer, s.article, s.sale_price
FROM sales s
WHERE s.sale_price > (
    SELECT AVG(price) 
    FROM shop 
    WHERE article = s.article
)
ORDER BY s.article, s.dealer;

-- Create customers table
CREATE TABLE customers (
    customer_id INT IDENTITY(1,1) PRIMARY KEY,
    customer_name VARCHAR(100),
    contact_info VARCHAR(100)
);

-- Create payments table
CREATE TABLE payments (
    payment_id INT IDENTITY(1,1) PRIMARY KEY,
    customer_id INT,
    sale_id INT,
    payment_amount DECIMAL(16, 2),
    payment_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id)
);

-- Insert data into customers table
INSERT INTO customers (customer_name, contact_info) VALUES
    ('Alice Johnson', 'alice@example.com'),
    ('Bob Smith', 'bob@example.com'),
    ('Charlie Brown', 'charlie@example.com');

-- Insert data into payments table
INSERT INTO payments (customer_id, sale_id, payment_amount, payment_date) VALUES
    (1, 1, 3.50, '2024-01-02'),
    (2, 2, 4.00, '2024-01-03'),
    (1, 3, 11.00, '2024-01-04'),
    (3, 4, 1.50, '2024-01-05'),
    (2, 5, 20.00, '2024-01-06');

-- Complex Query with aggregation and ranking
SELECT 
    s.dealer,
    s.article,
    SUM(s.sale_price) AS total_sales,
    AVG(s.sale_price) AS avg_sale_price,
    SUM(p.payment_amount) AS total_payments,
    RANK() OVER (ORDER BY SUM(s.sale_price) DESC) AS sales_rank
FROM 
    sales s
JOIN 
    payments p ON s.sale_id = p.sale_id
WHERE 
    s.sale_price > (
        SELECT AVG(price) 
        FROM shop 
        WHERE article = s.article
    )
GROUP BY 
    s.dealer, s.article
HAVING 
    total_payments > 0
ORDER BY 
    total_sales DESC;

select * from sales;

UPDATE sales AS s
SET sale_price = (
    SELECT AVG(price)
    FROM shop
    WHERE shop.article = s.article
)
WHERE s.sale_price < (
    SELECT AVG(price)
    FROM shop
    WHERE shop.article = s.article
);

select * from sales;

select * from shop;

UPDATE shop sh
SET price = (
    SELECT MAX(s.sale_price)
    FROM sales s
    WHERE s.article = sh.article AND s.dealer = sh.dealer
)
WHERE sh.article IN (SELECT DISTINCT article FROM sales);

select * from shop;

-- Delete sales records where the article is not found in the shop table
DELETE FROM sales
WHERE article NOT IN (SELECT article FROM shop);

-- Delete customer records where the customer_id is not found in the payments table
DELETE FROM customers
WHERE customer_id NOT IN (SELECT customer_id FROM payments);